const axios = require('axios');

async function verificarFirebaseEnProduccion() {
    try {
        console.log('üîç Verificando Firebase en producci√≥n...\n');
        
        // 1. Verificar diagn√≥stico p√∫blico
        console.log('üìä VERIFICANDO CONFIGURACI√ìN DE FIREBASE:');
        console.log('='.repeat(60));
        
        const diagResponse = await axios.get('https://backend-registro-muestras.onrender.com/api/notificaciones/diagnostico-publico');
        
        console.log(`üåç Entorno: ${diagResponse.data.environment}`);
        console.log(`üìù Firebase Project ID: ${diagResponse.data.firebaseConfig?.projectId || 'NO DEFINIDO'}`);
        console.log(`üìß Client Email: ${diagResponse.data.firebaseConfig?.clientEmail || 'NO DEFINIDO'}`);
        console.log(`üîê Private Key configurada: ${diagResponse.data.firebaseConfig?.hasPrivateKey ? '‚úÖ S√ç' : '‚ùå NO'}`);
        console.log('');
        
        // 2. Verificar tokens disponibles
        console.log('üì± VERIFICANDO TOKENS FCM:');
        console.log('='.repeat(60));
        
        const tokensResponse = await axios.get('https://backend-registro-muestras.onrender.com/api/notificaciones/diagnostico-produccion');
        
        if (tokensResponse.data.success) {
            console.log(`üìä Tokens encontrados: ${tokensResponse.data.tokensCount}`);
            tokensResponse.data.tokens.forEach((token, index) => {
                console.log(`   Token ${index + 1}:`);
                console.log(`     - Cliente: ${token.clienteDocumento}`);
                console.log(`     - Plataforma: ${token.platform}`);
                console.log(`     - Longitud: ${token.tokenLength} chars`);
                console.log(`     - Formato v√°lido: ${token.hasAPA91b ? '‚úÖ' : '‚ùå'}`);
                console.log(`     - Completo: ${token.isComplete ? '‚úÖ' : '‚ùå'}`);
            });
        }
        console.log('');
        
        // 3. Probar notificaci√≥n de prueba
        console.log('üöÄ PROBANDO NOTIFICACI√ìN FCM:');
        console.log('='.repeat(60));
        
        try {
            const testResponse = await axios.post('https://backend-registro-muestras.onrender.com/api/notificaciones-test/local', {
                clienteDocumento: '1235467890',
                mensaje: 'Prueba de diagn√≥stico'
            });
            
            console.log('‚úÖ RESULTADO DE PRUEBA FCM:');
            console.log(`   Success: ${testResponse.data.success}`);
            console.log(`   Message: ${testResponse.data.message}`);
            if (testResponse.data.data) {
                console.log(`   Dispositivos enviados: ${testResponse.data.data.devicesSent || 0}`);
                console.log(`   Dispositivos fallidos: ${testResponse.data.data.devicesFailed || 0}`);
            }
            
        } catch (testError) {
            console.log('‚ùå ERROR EN PRUEBA FCM:');
            if (testError.response) {
                console.log(`   Status: ${testError.response.status}`);
                console.log(`   Message: ${testError.response.data.message || 'Error desconocido'}`);
                if (testError.response.data.error) {
                    console.log(`   Error: ${testError.response.data.error}`);
                }
            } else {
                console.log(`   Error: ${testError.message}`);
            }
        }
        
        console.log('');
        console.log('üîß SOLUCIONES SUGERIDAS:');
        console.log('='.repeat(60));
        console.log('1. Verifica que Cloud Messaging est√© habilitado en Firebase Console');
        console.log('2. Confirma que el Project ID sea exactamente: aqualab-83795');
        console.log('3. Aseg√∫rate de que el service account tenga permisos FCM');
        console.log('4. Regenera el token FCM en la app m√≥vil si es necesario');
        
    } catch (error) {
        console.error('‚ùå Error general:', error.message);
        if (error.response) {
            console.error('Respuesta del servidor:', error.response.data);
        }
    }
}

verificarFirebaseEnProduccion();
