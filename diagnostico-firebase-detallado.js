/**
 * DIAGN√ìSTICO DETALLADO DE FIREBASE
 * Este script ayuda a identificar por qu√© las notificaciones FCM no llegan
 */

const admin = require('firebase-admin');
const axios = require('axios');

console.log('üîç === DIAGN√ìSTICO DETALLADO DE FIREBASE === üîç');
console.log('=============================================');

// Cargar variables de entorno
require('dotenv').config();

const firebaseConfig = {
    projectId: process.env.FIREBASE_PROJECT_ID,
    privateKeyId: process.env.FIREBASE_PRIVATE_KEY_ID,
    privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    clientId: process.env.FIREBASE_CLIENT_ID
};

console.log('\nüìã CONFIGURACI√ìN FIREBASE:');
console.log('==========================');
console.log('‚úÖ Project ID:', firebaseConfig.projectId);
console.log('‚úÖ Private Key ID:', firebaseConfig.privateKeyId);
console.log('‚úÖ Client Email:', firebaseConfig.clientEmail);
console.log('‚úÖ Client ID:', firebaseConfig.clientId);
console.log('‚úÖ Private Key Present:', !!firebaseConfig.privateKey);
console.log('‚úÖ Private Key Length:', firebaseConfig.privateKey?.length || 0);

// Funci√≥n para verificar si Firebase est√° inicializado
function verificarFirebaseAdmin() {
    console.log('\nüîß VERIFICANDO FIREBASE ADMIN SDK:');
    console.log('===================================');
    
    try {
        // Verificar si ya est√° inicializado
        if (admin.apps.length === 0) {
            console.log('üîÑ Inicializando Firebase Admin SDK...');
            admin.initializeApp({
                credential: admin.credential.cert(firebaseConfig),
                projectId: firebaseConfig.projectId
            });
            console.log('‚úÖ Firebase Admin SDK inicializado exitosamente');
        } else {
            console.log('‚úÖ Firebase Admin SDK ya est√° inicializado');
        }
        
        // Verificar la configuraci√≥n
        const app = admin.app();
        console.log('‚úÖ App Name:', app.name);
        console.log('‚úÖ Project ID desde app:', app.options.projectId);
        
        return true;
    } catch (error) {
        console.log('‚ùå Error al inicializar Firebase Admin SDK:');
        console.log('   Error:', error.message);
        console.log('   Code:', error.code);
        return false;
    }
}

// Funci√≥n para verificar el proyecto en Firebase Console
async function verificarProyectoFirebase() {
    console.log('\nüåê VERIFICANDO PROYECTO EN FIREBASE:');
    console.log('====================================');
    
    try {
        // Verificar con Google Cloud API
        const projectId = firebaseConfig.projectId;
        const url = `https://firebase.googleapis.com/v1beta1/projects/${projectId}`;
        
        console.log('üîç Verificando proyecto:', projectId);
        console.log('üîç URL:', url);
        
        // Crear token de acceso
        const credential = admin.credential.cert(firebaseConfig);
        const accessToken = await credential.getAccessToken();
        
        console.log('‚úÖ Token de acceso obtenido exitosamente');
        
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${accessToken.access_token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ Proyecto verificado exitosamente');
        console.log('‚úÖ Display Name:', response.data.displayName);
        console.log('‚úÖ Project Number:', response.data.projectNumber);
        
        return true;
    } catch (error) {
        console.log('‚ùå Error al verificar proyecto:');
        console.log('   Status:', error.response?.status);
        console.log('   Message:', error.response?.data?.error?.message || error.message);
        console.log('   Code:', error.response?.data?.error?.code || error.code);
        
        if (error.response?.status === 404) {
            console.log('üö® PROBLEMA: El proyecto no existe o no tienes permisos');
        } else if (error.response?.status === 403) {
            console.log('üö® PROBLEMA: No tienes permisos para acceder al proyecto');
        }
        
        return false;
    }
}

// Funci√≥n para verificar Cloud Messaging
async function verificarCloudMessaging() {
    console.log('\nüì± VERIFICANDO CLOUD MESSAGING:');
    console.log('===============================');
    
    try {
        const projectId = firebaseConfig.projectId;
        const url = `https://fcm.googleapis.com/v1/projects/${projectId}/messages:send`;
        
        console.log('üîç Verificando FCM endpoint:', url);
        
        // Crear token de acceso
        const credential = admin.credential.cert(firebaseConfig);
        const accessToken = await credential.getAccessToken();
        
        // Intentar enviar un mensaje de prueba (fallar√° pero nos dir√° si el endpoint existe)
        const testMessage = {
            message: {
                token: 'test-token-invalid',
                notification: {
                    title: 'Test',
                    body: 'Test'
                }
            }
        };
        
        const response = await axios.post(url, testMessage, {
            headers: {
                'Authorization': `Bearer ${accessToken.access_token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('‚úÖ FCM endpoint accesible');
        return true;
        
    } catch (error) {
        console.log('üîç Respuesta del FCM endpoint:');
        console.log('   Status:', error.response?.status);
        console.log('   Error:', error.response?.data?.error?.message || error.message);
        
        if (error.response?.status === 400) {
            console.log('‚úÖ FCM endpoint funciona (error 400 es esperado con token inv√°lido)');
            return true;
        } else if (error.response?.status === 404) {
            console.log('‚ùå FCM endpoint no encontrado - Cloud Messaging no habilitado');
            return false;
        } else {
            console.log('‚ùå Error inesperado en FCM endpoint');
            return false;
        }
    }
}

// Funci√≥n para probar env√≠o real con token v√°lido
async function probarEnvioReal() {
    console.log('\nüöÄ PROBANDO ENV√çO REAL:');
    console.log('=======================');
    
    try {
        // Token de prueba (debes reemplazarlo con uno real)
        const testToken = 'fH13KRXaQjC4GjV5Ye_r...'; // Token parcial del log
        
        console.log('üîç Usando token de prueba:', testToken);
        
        const message = {
            notification: {
                title: 'üîç Prueba de Diagn√≥stico',
                body: 'Este es un mensaje de prueba para verificar FCM'
            },
            data: {
                tipo: 'diagnostico',
                timestamp: new Date().toISOString()
            },
            token: testToken
        };
        
        const response = await admin.messaging().send(message);
        console.log('‚úÖ Mensaje enviado exitosamente:', response);
        
        return true;
    } catch (error) {
        console.log('‚ùå Error al enviar mensaje:');
        console.log('   Error:', error.message);
        console.log('   Code:', error.code);
        console.log('   Details:', error.details || 'No details');
        
        // Analizar el error
        if (error.code === 'messaging/registration-token-not-registered') {
            console.log('üí° El token FCM no es v√°lido o ha expirado');
        } else if (error.code === 'messaging/invalid-registration-token') {
            console.log('üí° El formato del token FCM es inv√°lido');
        } else if (error.code === 'messaging/unknown-error') {
            console.log('üí° Error desconocido - posible problema de configuraci√≥n');
        }
        
        return false;
    }
}

// Funci√≥n principal
async function ejecutarDiagnostico() {
    console.log('üöÄ Iniciando diagn√≥stico completo...\n');
    
    let pasosPasados = 0;
    const totalPasos = 4;
    
    // Paso 1: Verificar Firebase Admin SDK
    if (verificarFirebaseAdmin()) {
        pasosPasados++;
        console.log(`‚úÖ Paso 1/${totalPasos} completado`);
    } else {
        console.log(`‚ùå Paso 1/${totalPasos} fall√≥ - No se puede continuar`);
        return;
    }
    
    // Paso 2: Verificar proyecto
    if (await verificarProyectoFirebase()) {
        pasosPasados++;
        console.log(`‚úÖ Paso 2/${totalPasos} completado`);
    } else {
        console.log(`‚ùå Paso 2/${totalPasos} fall√≥`);
    }
    
    // Paso 3: Verificar Cloud Messaging
    if (await verificarCloudMessaging()) {
        pasosPasados++;
        console.log(`‚úÖ Paso 3/${totalPasos} completado`);
    } else {
        console.log(`‚ùå Paso 3/${totalPasos} fall√≥`);
    }
    
    // Paso 4: Probar env√≠o real
    if (await probarEnvioReal()) {
        pasosPasados++;
        console.log(`‚úÖ Paso 4/${totalPasos} completado`);
    } else {
        console.log(`‚ùå Paso 4/${totalPasos} fall√≥`);
    }
    
    // Resumen final
    console.log('\nüéØ RESUMEN DEL DIAGN√ìSTICO:');
    console.log('===========================');
    console.log(`‚úÖ Pasos completados: ${pasosPasados}/${totalPasos}`);
    console.log(`‚ùå Pasos fallidos: ${totalPasos - pasosPasados}/${totalPasos}`);
    
    if (pasosPasados === totalPasos) {
        console.log('üéâ ¬°Todos los pasos completados! FCM deber√≠a funcionar correctamente.');
    } else {
        console.log('\nüí° RECOMENDACIONES:');
        console.log('===================');
        
        if (pasosPasados < 2) {
            console.log('1. Verifica que el proyecto "aqualab-83795" existe en Firebase Console');
            console.log('2. Verifica que las credenciales son correctas');
            console.log('3. Considera crear un nuevo proyecto Firebase');
        }
        
        if (pasosPasados < 3) {
            console.log('4. Habilita Cloud Messaging en Firebase Console');
            console.log('5. Verifica la configuraci√≥n de FCM');
        }
        
        if (pasosPasados < 4) {
            console.log('6. Regenera el token FCM en la aplicaci√≥n Android');
            console.log('7. Verifica que el token est√° actualizado');
        }
    }
}

// Ejecutar diagn√≥stico
ejecutarDiagnostico().catch(console.error);
