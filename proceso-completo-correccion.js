require('dotenv').config();
const https = require('https');

console.log('üîß PROCESO COMPLETO DE CORRECCI√ìN DE CLAVE FIREBASE');
console.log('==================================================');

const BACKEND_URL = 'https://backend-sena-lab.onrender.com';

// Funci√≥n para hacer petici√≥n HTTP
function makeRequest(url) {
    return new Promise((resolve, reject) => {
        https.get(url, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    resolve(JSON.parse(data));
                } catch (error) {
                    resolve({ error: 'Respuesta no v√°lida', rawData: data });
                }
            });
        }).on('error', reject);
    });
}

async function procesarCorreccionCompleta() {
    console.log('\nüìã PASO 1: MOSTRAR FORMATO CORRECTO DE CLAVE');
    console.log('='.repeat(50));
    
    const privateKey = process.env.FIREBASE_PRIVATE_KEY;
    if (!privateKey) {
        console.log('‚ùå ERROR: No se puede cargar FIREBASE_PRIVATE_KEY del archivo .env');
        console.log('Aseg√∫rate de que el archivo .env est√© presente y configurado');
        return;
    }
    
    const cleanedKey = privateKey.trim();
    console.log('‚úÖ Clave privada cargada correctamente');
    console.log(`Longitud: ${cleanedKey.length} caracteres`);
    console.log(`L√≠neas: ${cleanedKey.split('\n').length}`);
    
    console.log('\n' + '='.repeat(60));
    console.log('COPIA ESTA CLAVE PARA RENDER (SIN COMILLAS):');
    console.log('='.repeat(60));
    console.log(cleanedKey);
    console.log('='.repeat(60));
    
    console.log('\nüìã PASO 2: INSTRUCCIONES PARA ACTUALIZAR EN RENDER');
    console.log('='.repeat(50));
    console.log('1. Abre tu dashboard de Render: https://dashboard.render.com/');
    console.log('2. Selecciona tu servicio "Backend-SENA-LAB"');
    console.log('3. Ve a "Environment" en el men√∫ lateral');
    console.log('4. Busca la variable "FIREBASE_PRIVATE_KEY"');
    console.log('5. Haz clic en "Edit" junto a esa variable');
    console.log('6. Borra el contenido actual completamente');
    console.log('7. Copia y pega EXACTAMENTE la clave de arriba (SIN COMILLAS)');
    console.log('8. Haz clic en "Save Changes"');
    console.log('9. Espera a que se complete el redespliegue autom√°tico');
    console.log('10. Vuelve a ejecutar este script para verificar');
    
    console.log('\nüìã PASO 3: VERIFICANDO ESTADO ACTUAL EN PRODUCCI√ìN');
    console.log('='.repeat(50));
    
    try {
        const response = await makeRequest(`${BACKEND_URL}/api/debug/diagnostico-fcm`);
        
        if (response.error) {
            console.log('‚ùå No se pudo conectar al servidor de producci√≥n');
            console.log('Error:', response.error);
            console.log('Esto puede indicar que el servidor est√° reiniciando despu√©s de la actualizaci√≥n');
        } else {
            console.log('‚úÖ Servidor de producci√≥n respondiendo');
            console.log('\nEstado de Firebase:');
            console.log('- Firebase inicializado:', response.firebaseInitialized ? '‚úÖ' : '‚ùå');
            console.log('- FCM disponible:', response.fcmAvailable ? '‚úÖ' : '‚ùå');
            console.log('- Estado general:', response.status);
            
            if (response.privateKeyFormat) {
                console.log('\nFormato de clave privada:');
                console.log('- Existe:', response.privateKeyFormat.exists ? '‚úÖ' : '‚ùå');
                console.log('- Longitud:', response.privateKeyFormat.length);
                console.log('- Marcador BEGIN:', response.privateKeyFormat.hasBeginMarker ? '‚úÖ' : '‚ùå');
                console.log('- Marcador END:', response.privateKeyFormat.hasEndMarker ? '‚úÖ' : '‚ùå');
                console.log('- Saltos de l√≠nea:', response.privateKeyFormat.hasNewlines ? '‚úÖ' : '‚ùå');
                console.log('- N√∫mero de l√≠neas:', response.privateKeyFormat.lineCount);
                console.log('- N√∫mero de \\n:', response.privateKeyFormat.newlineCount);
                
                // Validar formato
                const formatoValido = response.privateKeyFormat.exists &&
                                    response.privateKeyFormat.length > 1600 &&
                                    response.privateKeyFormat.hasBeginMarker &&
                                    response.privateKeyFormat.hasEndMarker &&
                                    response.privateKeyFormat.hasNewlines &&
                                    response.privateKeyFormat.lineCount >= 27 &&
                                    response.privateKeyFormat.newlineCount >= 26;
                
                console.log('- Formato v√°lido:', formatoValido ? '‚úÖ' : '‚ùå');
                
                if (!formatoValido) {
                    console.log('\n‚ö†Ô∏è  FORMATO DE CLAVE INV√ÅLIDO - REQUIERE ACTUALIZACI√ìN');
                } else {
                    console.log('\n‚úÖ FORMATO DE CLAVE CORRECTO');
                }
            }
        }
    } catch (error) {
        console.log('‚ùå Error al verificar producci√≥n:', error.message);
    }
    
    console.log('\nüìã PASO 4: PR√ìXIMOS PASOS');
    console.log('='.repeat(50));
    console.log('Despu√©s de actualizar la clave en Render:');
    console.log('1. Espera 2-3 minutos a que se complete el redespliegue');
    console.log('2. Ejecuta este script nuevamente para verificar');
    console.log('3. Si todo est√° ‚úÖ, prueba enviar notificaciones');
    console.log('4. Usa el script: node probar-token-completo-produccion.js');
    
    console.log('\nüìû SOPORTE ADICIONAL:');
    console.log('- Si a√∫n hay problemas, revisa los logs en Render');
    console.log('- Verifica que la clave se copi√≥ sin caracteres extra');
    console.log('- Aseg√∫rate de que no hay espacios al inicio o final');
}

// Ejecutar proceso completo
procesarCorreccionCompleta().catch(error => {
    console.error('‚ùå Error en proceso:', error);
});
