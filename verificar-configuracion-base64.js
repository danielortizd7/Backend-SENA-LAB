console.log('üîç VERIFICACI√ìN DE CONFIGURACI√ìN FIREBASE BASE64');
console.log('==============================================');

// Simular la l√≥gica del NotificationService
function testFirebaseConfig() {
    console.log('\nüìã PRUEBA DE L√ìGICA DE CONFIGURACI√ìN:');
    
    // Caso 1: Solo FIREBASE_PRIVATE_KEY_BASE64
    console.log('\n1. Caso con FIREBASE_PRIVATE_KEY_BASE64:');
    const testEnv1 = {
        FIREBASE_PROJECT_ID: 'test-project',
        FIREBASE_CLIENT_EMAIL: 'test@test.com',
        FIREBASE_PRIVATE_KEY_BASE64: 'dGVzdA==', // "test" en base64
        FIREBASE_PRIVATE_KEY: undefined
    };
    
    console.log('   Variables disponibles:', Object.keys(testEnv1).filter(k => testEnv1[k]));
    
    // Verificar variables requeridas
    const requiredVars = ['FIREBASE_PROJECT_ID', 'FIREBASE_CLIENT_EMAIL'];
    const missingVars = requiredVars.filter(varName => !testEnv1[varName]);
    
    if (!testEnv1.FIREBASE_PRIVATE_KEY_BASE64 && !testEnv1.FIREBASE_PRIVATE_KEY) {
        missingVars.push('FIREBASE_PRIVATE_KEY_BASE64 o FIREBASE_PRIVATE_KEY');
    }
    
    console.log('   Variables faltantes:', missingVars.length === 0 ? 'Ninguna' : missingVars);
    
    // Determinar qu√© configuraci√≥n usar
    let privateKey;
    if (testEnv1.FIREBASE_PRIVATE_KEY_BASE64) {
        privateKey = Buffer.from(testEnv1.FIREBASE_PRIVATE_KEY_BASE64, 'base64').toString('utf8');
        console.log('   ‚úÖ Usando FIREBASE_PRIVATE_KEY_BASE64');
        console.log('   Resultado decodificado:', privateKey);
    } else {
        privateKey = testEnv1.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n');
        console.log('   ‚úÖ Usando FIREBASE_PRIVATE_KEY tradicional');
    }
    
    console.log('   Estado final: CONFIGURACI√ìN V√ÅLIDA');
    
    // Caso 2: Solo FIREBASE_PRIVATE_KEY tradicional
    console.log('\n2. Caso con FIREBASE_PRIVATE_KEY tradicional:');
    const testEnv2 = {
        FIREBASE_PROJECT_ID: 'test-project',
        FIREBASE_CLIENT_EMAIL: 'test@test.com',
        FIREBASE_PRIVATE_KEY_BASE64: undefined,
        FIREBASE_PRIVATE_KEY: '"test\\nkey"'
    };
    
    console.log('   Variables disponibles:', Object.keys(testEnv2).filter(k => testEnv2[k]));
    
    const missingVars2 = requiredVars.filter(varName => !testEnv2[varName]);
    if (!testEnv2.FIREBASE_PRIVATE_KEY_BASE64 && !testEnv2.FIREBASE_PRIVATE_KEY) {
        missingVars2.push('FIREBASE_PRIVATE_KEY_BASE64 o FIREBASE_PRIVATE_KEY');
    }
    
    console.log('   Variables faltantes:', missingVars2.length === 0 ? 'Ninguna' : missingVars2);
    
    let privateKey2;
    if (testEnv2.FIREBASE_PRIVATE_KEY_BASE64) {
        privateKey2 = Buffer.from(testEnv2.FIREBASE_PRIVATE_KEY_BASE64, 'base64').toString('utf8');
        console.log('   ‚úÖ Usando FIREBASE_PRIVATE_KEY_BASE64');
    } else {
        privateKey2 = testEnv2.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n');
        console.log('   ‚úÖ Usando FIREBASE_PRIVATE_KEY tradicional');
        console.log('   Resultado procesado:', privateKey2);
    }
    
    console.log('   Estado final: CONFIGURACI√ìN V√ÅLIDA');
    
    // Caso 3: Sin ninguna clave privada
    console.log('\n3. Caso sin claves privadas:');
    const testEnv3 = {
        FIREBASE_PROJECT_ID: 'test-project',
        FIREBASE_CLIENT_EMAIL: 'test@test.com',
        FIREBASE_PRIVATE_KEY_BASE64: undefined,
        FIREBASE_PRIVATE_KEY: undefined
    };
    
    const missingVars3 = requiredVars.filter(varName => !testEnv3[varName]);
    if (!testEnv3.FIREBASE_PRIVATE_KEY_BASE64 && !testEnv3.FIREBASE_PRIVATE_KEY) {
        missingVars3.push('FIREBASE_PRIVATE_KEY_BASE64 o FIREBASE_PRIVATE_KEY');
    }
    
    console.log('   Variables faltantes:', missingVars3);
    console.log('   Estado final: CONFIGURACI√ìN INV√ÅLIDA');
}

// Ejecutar prueba
testFirebaseConfig();

console.log('\n‚úÖ VERIFICACI√ìN COMPLETADA');
console.log('=========================');
console.log('La configuraci√≥n en notificationService.js es correcta:');
console.log('1. ‚úÖ Detecta autom√°ticamente FIREBASE_PRIVATE_KEY_BASE64');
console.log('2. ‚úÖ Usa Base64 como prioridad si est√° disponible');
console.log('3. ‚úÖ Fallback a FIREBASE_PRIVATE_KEY tradicional');
console.log('4. ‚úÖ Valida que al menos una clave privada est√© presente');
console.log('5. ‚úÖ Logging apropiado para identificar qu√© configuraci√≥n usa');

console.log('\nüöÄ PR√ìXIMOS PASOS:');
console.log('1. Agregar FIREBASE_PRIVATE_KEY_BASE64 en Render');
console.log('2. Redeploy del servicio');
console.log('3. Verificar logs para confirmar: "üîß Usando FIREBASE_PRIVATE_KEY_BASE64"');
console.log('4. Probar env√≠o de notificaciones');

console.log('\nüìä DIAGN√ìSTICO EN PRODUCCI√ìN:');
console.log('Si ves "üîß Usando FIREBASE_PRIVATE_KEY_BASE64" en los logs,');
console.log('significa que la configuraci√≥n Base64 est√° funcionando correctamente.');
